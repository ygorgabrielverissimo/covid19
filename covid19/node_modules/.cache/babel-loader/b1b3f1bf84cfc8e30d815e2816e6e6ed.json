{"ast":null,"code":"var _jsxFileName = \"/Users/ygorverissimo/Documents/Documentos/Projetos/Bootcamp-Frontend/covid19/src/containers/Main/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useState, useCallback, useEffect } from 'react';\nimport getCountry from '../../api/apiCovid';\nimport Board from './components/Board';\nimport Panel from './components/Panel';\nimport { ContainerStyled } from './style';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Main() {\n  _s();\n\n  const [data, setData] = useState({});\n  const [country, setCountry] = useState('brazil');\n  const updateAt = new Date().toLocaleString(); // O callback é para evitar o loop, mas quero que ele execute toda vez que tiver \n  // alteração de países, senão teria que criar outro userEffect\n\n  const getCovidData = useCallback(country => {\n    getCountry.getCountry(country).then(data => setData(data));\n  }, []);\n  useEffect(() => {\n    getCovidData(country);\n  }, [getCovidData, country]);\n\n  const handleChange = ({\n    target\n  }) => {\n    const country = target.value;\n    setCountry(country);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ContainerStyled, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-2\",\n      children: /*#__PURE__*/_jsxDEV(Panel, {\n        data: data,\n        updateAt: updateAt,\n        onChange: handleChange,\n        country: country,\n        getCovidData: getCovidData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Main, \"LPIBp8dFiu0ruC3oKzYKUvKJyNA=\");\n\n_c = Main;\nexport default _c2 = /*#__PURE__*/memo(Main);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Main\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/ygorverissimo/Documents/Documentos/Projetos/Bootcamp-Frontend/covid19/src/containers/Main/index.jsx"],"names":["React","memo","useState","useCallback","useEffect","getCountry","Board","Panel","ContainerStyled","Main","data","setData","country","setCountry","updateAt","Date","toLocaleString","getCovidData","then","handleChange","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,QAAtB,EAAgCC,WAAhC,EAA6CC,SAA7C,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,eAAT,QAAgC,SAAhC;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AACZ,QAAK,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAK,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,QAAD,CAArC;AACA,QAAMY,QAAQ,GAAG,IAAIC,IAAJ,GAAWC,cAAX,EAAjB,CAHY,CAKZ;AACA;;AACA,QAAMC,YAAY,GAAGd,WAAW,CAAES,OAAD,IAAa;AAC1CP,IAAAA,UAAU,CAACA,UAAX,CAAsBO,OAAtB,EACKM,IADL,CACUR,IAAI,IAAIC,OAAO,CAACD,IAAD,CADzB;AAEH,GAH+B,EAG7B,EAH6B,CAAhC;AAKAN,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,YAAY,CAACL,OAAD,CAAZ;AACH,GAFQ,EAEN,CAACK,YAAD,EAAeL,OAAf,CAFM,CAAT;;AAIA,QAAMO,YAAY,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAgB;AACjC,UAAMR,OAAO,GAAGQ,MAAM,CAACC,KAAvB;AACAR,IAAAA,UAAU,CAACD,OAAD,CAAV;AACH,GAHD;;AAKA,sBACI,QAAC,eAAD;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACI,QAAC,KAAD;AACI,QAAA,IAAI,EAAKF,IADb;AAEI,QAAA,QAAQ,EAAKI,QAFjB;AAGI,QAAA,QAAQ,EAAKK,YAHjB;AAII,QAAA,OAAO,EAAKP,OAJhB;AAKI,QAAA,YAAY,EAAKK;AALrB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAWI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAGP;AAAd;AAAA;AAAA;AAAA;AAAA,YAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GApCQD,I;;KAAAA,I;AAsCT,kCAAeR,IAAI,CAACQ,IAAD,CAAnB","sourcesContent":["import React, { memo, useState, useCallback, useEffect } from 'react'\nimport getCountry from '../../api/apiCovid'\nimport Board from './components/Board'\nimport Panel from './components/Panel'\nimport { ContainerStyled } from './style'\n\nfunction Main() {\n    const[data, setData] = useState({})\n    const[country, setCountry] = useState('brazil')\n    const updateAt = new Date().toLocaleString()\n\n    // O callback é para evitar o loop, mas quero que ele execute toda vez que tiver \n    // alteração de países, senão teria que criar outro userEffect\n    const getCovidData = useCallback((country) => {\n        getCountry.getCountry(country)\n            .then(data => setData(data))\n    }, [])\n\n    useEffect(() => {\n        getCovidData(country)\n    }, [getCovidData, country])\n\n    const handleChange = ({ target }) => {\n        const country = target.value\n        setCountry(country)\n    }\n\n    return (\n        <ContainerStyled>\n            <div className=\"mb-2\">\n                <Panel\n                    data = { data }\n                    updateAt = { updateAt }\n                    onChange = { handleChange }\n                    country = { country }\n                    getCovidData = { getCovidData }\n                />\n            </div>\n            \n            <Board data={ data } />\n        </ContainerStyled>\n    )\n}\n\nexport default memo(Main)"]},"metadata":{},"sourceType":"module"}